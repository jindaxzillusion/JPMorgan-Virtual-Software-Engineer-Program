var EventSource = require('../lib/eventsource')
  , http = require('http')
  , https = require('https')
  , fs = require('fs')
  , assert = require('assert')
  , u = require('url');

var _port = 20000;
var servers = 0;
process.on('exit', function () {
  if (servers != 0) {
    console.error("************ Didn't kill all servers - there is still %d running.", servers);
  }
});

function createServer(callback) {
  var server = http.createServer();
  configureServer(server, 'http', _port++, callback);
}

function createHttpsServer(callback) {
  var options = {
    key: fs.readFileSync(__dirname + '/key.pem'),
    cert: fs.readFileSync(__dirname + '/certificate.pem')
  };
  var server = https.createServer(options);
  configureServer(server, 'https', _port++, callback);
}

function configureServer(server, protocol, port, callback) {
  var responses = [];

  var oldClose = server.close;
  server.close = function() {
    responses.forEach(function (res) {
      res.end();
    });
    servers--;
    oldClose.apply(this, arguments);
  };

  server.on('request', function (req, res) {
    responses.push(res);
  });

  server.url = protocol + '://localhost:' + port;

  server.listen(port, function onOpen(err) {
    servers++;
    callback(err, server);
  });
}

function writeEvents(chunks) {
  return function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/event-stream'});
    chunks.forEach(function (chunk) {
      res.write(chunk);
    });
    res.write(':'); // send a dummy comment to ensure that the head is flushed
  };
}

describe('Parser', function () {
  it('parses multibyte characters', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      server.on('request', writeEvents(["id: 1\ndata: €豆腐\n\n"]));
      var es = new EventSource(server.url);

      es.onmessage = function (m) {
        assert.equal("€豆腐", m.data);
        server.close(done);
      };
    });
  });

  it('parses empty lines with multibyte characters', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      server.on('request', writeEvents(["\n\n\n\nid: 1\ndata: 我現在都看實況不玩遊戲\n\n"]));
      var es = new EventSource(server.url);

      es.onmessage = function (m) {
        assert.equal("我現在都看實況不玩遊戲", m.data);
        server.close(done);
      };
    });
  });

  it('parses one one-line message in one chunk', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      server.on('request', writeEvents(["data: Hello\n\n"]));
      var es = new EventSource(server.url);
      es.onmessage = function (m) {
        assert.equal("Hello", m.data);
        server.close(done);
      };
    });
  });

  it('parses one one-line message in two chunks', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      server.on('request', writeEvents(["data: Hel", "lo\n\n"]));
      var es = new EventSource(server.url);
      es.onmessage = function (m) {
        assert.equal("Hello", m.data);
        server.close(done);
      };
    });
  });

  it('parses two one-line messages in one chunk', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      server.on('request', writeEvents(["data: Hello\n\n", "data: World\n\n"]));
      var es = new EventSource(server.url);

      es.onmessage = first;

      function first(m) {
        assert.equal("Hello", m.data);
        es.onmessage = second;
      }

      function second(m) {
        assert.equal("World", m.data);
        server.close(done);
      }
    });
  });

  it('parses one two-line message in one chunk', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      server.on('request', writeEvents(["data: Hello\ndata:World\n\n"]));
      var es = new EventSource(server.url);

      es.onmessage = function (m) {
        assert.equal("Hello\nWorld", m.data);
        server.close(done);
      };
    });
  });

  it('parses really chopped up unicode data', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      var chopped = "data: Aslak\n\ndata: Hellesøy\n\n".split("");
      server.on('request', writeEvents(chopped));
      var es = new EventSource(server.url);

      es.onmessage = first;

      function first(m) {
        assert.equal("Aslak", m.data);
        es.onmessage = second;
      }

      function second(m) {
        assert.equal("Hellesøy", m.data);
        server.close(done);
      }
    });
  });

  it('accepts CRLF as separator', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      var chopped = "data: Aslak\r\n\r\ndata: Hellesøy\r\n\r\n".split("");
      server.on('request', writeEvents(chopped));
      var es = new EventSource(server.url);

      es.onmessage = first;

      function first(m) {
        assert.equal("Aslak", m.data);
        es.onmessage = second;
      }

      function second(m) {
        assert.equal("Hellesøy", m.data);
        server.close(done);
      }
    });
  });

  it('accepts CR as separator', function (done) {
    createServer(function (err, server) {
      if (err) return done(err);

      var chopped = "data: Aslak\r\rdata: Hellesøy\r\r".split("");
      server.on('request', writeEvents(chopped));
      var es = new EventSource(server.url);

      es.onmessage = first;

      function first(m) {
        assert.equal("Aslak", m.data);
        es.onmessage = second;
      }

      f